# frozen_string_literal: true

module MergeRequests
  class CreateFromVulnerabilityDataService < ::BaseService
    def execute
      return error("Can't create merge_request") unless can_create_merge_request?

      vulnerability = case @params[:category]
                      when 'sast', 'dependency_scanning', 'dast'
                        Gitlab::Vulnerabilities::StandardVulnerability.new(@params)
                      when 'container_scanning'
                        Gitlab::Vulnerabilities::ContainerScanningVulnerability.new(@params)
                      end

      return error('Invalid vulnerability category') unless vulnerability
      return error("Can't create merge request") unless vulnerability.remediation

      target_branch = @project.default_branch
      title_slug = Gitlab::Utils.slugify(vulnerability.title)
      branch_name = "remediate/%s-%s" % [
        title_slug[0..74],
        Time.now.strftime("D%Y%m%dT%H%M%S")
      ]

      patch_result = create_patch(vulnerability, branch_name, target_branch)

      return error('Unable to apply patch') unless patch_result[:status] == :success

      merge_request_params = {
        title: "Resolve vulnerability: #{vulnerability.title}",
        description: render_description(vulnerability),
        source_branch: branch_name,
        target_branch: target_branch,
        force_remove_source_branch: "1"
      }

      merge_request = MergeRequests::CreateService.new(@project, @current_user, merge_request_params).execute

      if merge_request.valid?
        success(merge_request)
      else
        error(merge_request.errors)
      end
    end

    private

    def create_patch(vulnerability, source_branch, target_branch)
      diff = Base64.decode64(vulnerability.data.dig(:remediation, :diff))
      head_commit = project.repository.find_branch(target_branch).dereferenced_target
      new_commit = render_commit(diff, head_commit, vulnerability)

      commit_patch_params = {
        branch_name: source_branch,
        patches: [
          new_commit
        ]
      }

      Commits::CommitPatchService.new(@project, @current_user, commit_patch_params).execute
    end

    def success(merge_request)
      super(merge_request: merge_request)
    end

    def render_commit(diff, head_commit, vulnerability)
      git_user = Gitlab::Git::User.from_gitlab(@current_user)

      render_template(
        file: 'vulnerabilities/remediation.patch.erb',
        locals: {
          diff: diff,
          head_commit: head_commit,
          user: git_user,
          vulnerability: vulnerability
        }
      )
    end

    def render_description(vulnerability)
      render_template(
        file: 'vulnerabilities/merge_request_description.md.erb',
        locals: { vulnerability: vulnerability }
      )
    end

    def render_template(file:, locals:)
      path = File.join(Rails.root, "ee/app/views", file)

      ERB.new(File.read(path)).result_with_hash(locals)
    end

    def can_create_merge_request?
      can?(@current_user, :create_merge_request_in, @project) &&
        ::Gitlab::UserAccess.new(@current_user, project: @project).can_push_to_branch?(@project.default_branch)
    end
  end
end
