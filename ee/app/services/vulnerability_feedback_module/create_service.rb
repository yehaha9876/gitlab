# frozen_string_literal: true

module VulnerabilityFeedbackModule
  class CreateService < ::BaseService
    def execute
      vulnerability_feedback = @project.vulnerability_feedback.new(@params)
      vulnerability_feedback.author = @current_user

      if vulnerability_feedback.issue? && # (feedback_type == 'issue')
          !vulnerability_feedback.vulnerability_data.blank?

          create_issue_for(vulnerability_feedback)
      elsif vulnerability_feedback.merge_request? &&
          !vulnerability_feedback.vulnerability_data.blank?

          create_merge_request_for(vulnerability_feedback)
      else
        vulnerability_feedback.save
      end

      if vulnerability_feedback.persisted?
        success(vulnerability_feedback)
      else
        vulnerability_feedback.merge_request&.destroy

        error(vulnerability_feedback.errors)
      end

    rescue ArgumentError => e
      # VulnerabilityFeedback relies on #enum attributes which raise this exception
      error(e.message)
    end

    private

    def success(vulnerability_feedback)
      super().merge(vulnerability_feedback: vulnerability_feedback)
    end

    def create_issue_for(vulnerability_feedback)
      # Wrap Feedback and Issue creation in the same transaction
      ActiveRecord::Base.transaction do
        result = Issues::CreateFromVulnerabilityDataService
          .new(@project, @current_user, vulnerability_feedback.vulnerability_data)
          .execute

        if result[:status] == :error
          vulnerability_feedback.errors[:issue] << result[:message]
          raise ActiveRecord::Rollback
        end

        issue = result[:issue]
        vulnerability_feedback.issue = issue

        # Ensure created association is rolled back if feedback can't be saved
        raise ActiveRecord::Rollback unless vulnerability_feedback.save
      end
    end

    def create_merge_request_for(vulnerability_feedback)
      result = MergeRequests::CreateFromVulnerabilityDataService
        .new(@project, @current_user, vulnerability_feedback.vulnerability_data)
        .execute

      if result[:status] == :success
        merge_request = result[:merge_request]
        vulnerability_feedback.merge_request = merge_request

        vulnerability_feedback.save
      else
        vulnerability_feedback.errors[:merge_request] << result[:message]
      end
    end
  end
end
